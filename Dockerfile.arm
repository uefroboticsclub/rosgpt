# # FROM osrf/ros:noetic-desktop-full
# FROM arm64v8/ros:noetic
# ENV DEBIAN_FRONTEND=noninteractive
# ENV HEADLESS=false

# # Install required packages
# RUN apt-get update && apt-get install -y \
#     ros-$(rosversion -d)-turtlesim \
#     locales \
#     xvfb \
#     python3.9 \
#     python3.9-distutils \
#     python3.9-dev \
#     curl \
#     wget \
#     git \
#     udev \
#     nano \
#     net-tools \
#     usbutils \
#     build-essential \
#     cmake \
#     && apt-get clean && rm -rf /var/lib/apt/lists/*

# # Install pip for both Python versions using the correct bootstrap scripts
# RUN wget https://bootstrap.pypa.io/pip/3.8/get-pip.py -O get-pip-3.8.py && \
#     python3 get-pip-3.8.py && \
#     rm get-pip-3.8.py && \
#     wget https://bootstrap.pypa.io/get-pip.py -O get-pip-3.9.py && \
#     python3.9 get-pip-3.9.py && \
#     rm get-pip-3.9.py

# # Verify pip installation for both versions
# RUN python3 -m pip --version && \
#     python3.9 -m pip --version

# # Set up PATH to include pip-installed binaries
# ENV PATH="/root/.local/bin:${PATH}"

# # Install ROS tools using system Python (python3)
# RUN python3 -m pip install -U python-dotenv catkin_tools

# # Install additional ROS packages for simulation
# RUN apt-get update && apt-get install -y \
#     ros-noetic-gazebo-ros \
#     ros-noetic-gazebo-ros-control \
#     ros-noetic-gazebo-ros-pkgs \
#     ros-noetic-joint-state-publisher \
#     ros-noetic-robot-state-publisher \
#     ros-noetic-rviz \
#     && apt-get clean && rm -rf /var/lib/apt/lists/*

# # Install the Interbotix workspace
# RUN mkdir -p /root/interbotix_ws/src
# WORKDIR /root/interbotix_ws/src
# RUN git clone https://github.com/Interbotix/interbotix_ros_manipulators.git
# RUN git clone https://github.com/Interbotix/interbotix_ros_core.git

# # Install dependencies for Interbotix
# WORKDIR /root/interbotix_ws
# RUN apt-get update && \
#     rosdep install --from-paths src --ignore-src -r -y && \
#     apt-get clean && \
#     rm -rf /var/lib/apt/lists/*

# # Build the Interbotix workspace
# RUN /bin/bash -c "source /opt/ros/noetic/setup.bash && catkin_make -j2"

# # Install Python dependencies for the agent
# RUN python3.9 -m pip install --user pyinputplus rich

# # Set up ROS environment
# RUN rosdep update && \
#     echo "source /opt/ros/noetic/setup.bash" >> /root/.bashrc && \
#     echo "source /root/interbotix_ws/devel/setup.bash" >> /root/.bashrc && \
#     echo "alias start='cd /app && catkin build && source devel/setup.bash && roslaunch arm_agent agent.launch'" >> /root/.bashrc && \
#     echo "export ROSLAUNCH_SSH_UNKNOWN=1" >> /root/.bashrc

# # Copy project files
# COPY . /app/
# WORKDIR /app/

# # Make the arm agent script executable
# RUN chmod +x /app/src/arm_agent/scripts/arm_agent.py

# # Install the package with Python 3.9
# RUN python3.9 -m pip install --user -e .

# # Create a startup script that works with available launch files
# RUN echo '#!/bin/bash\n\
# source /opt/ros/noetic/setup.bash\n\
# source /root/interbotix_ws/devel/setup.bash\n\
# roscore > /dev/null 2>&1 &\n\
# sleep 5\n\
# if [ "$HEADLESS" = "false" ]; then\n\
#     roslaunch interbotix_xsarm_control xsarm_control.launch robot_model:=px100 use_sim:=true use_fake:=true &\n\
# else\n\
#     xvfb-run -a -s "-screen 0 1920x1080x24" roslaunch interbotix_xsarm_control xsarm_control.launch robot_model:=px100 use_sim:=true use_fake:=true &\n\
# fi\n\
# sleep 5\n\
# echo "Run '\''start'\'' to build and launch the ROSGPT-PincherX-100 demo."\n\
# exec /bin/bash\n' > /start.sh && chmod +x /start.sh

# CMD ["/start.sh"]

# FROM osrf/ros:noetic-desktop-full
FROM arm64v8/ros:noetic
ENV DEBIAN_FRONTEND=noninteractive
ENV HEADLESS=false
# Install required packages
RUN apt-get update && apt-get install -y \
    ros-$(rosversion -d)-turtlesim \
    locales \
    xvfb \
    python3.9 \
    python3.9-distutils \
    python3.9-dev \
    curl \
    wget \
    git \
    udev \
    nano \
    net-tools \
    usbutils \
    build-essential \
    cmake \
    && apt-get clean && rm -rf /var/lib/apt/lists/*
# Install pip for both Python versions using the correct bootstrap scripts
RUN wget https://bootstrap.pypa.io/pip/3.8/get-pip.py -O get-pip-3.8.py && \
    python3 get-pip-3.8.py && \
    rm get-pip-3.8.py && \
    wget https://bootstrap.pypa.io/get-pip.py -O get-pip-3.9.py && \
    python3.9 get-pip-3.9.py && \
    rm get-pip-3.9.py
# Verify pip installation for both versions
RUN python3 -m pip --version && \
    python3.9 -m pip --version
# Set up PATH to include pip-installed binaries
ENV PATH="/root/.local/bin:${PATH}"
# Install ROS tools using system Python (python3)
RUN python3 -m pip install -U python-dotenv catkin_tools
# Install additional ROS packages for simulation
RUN apt-get update && apt-get install -y \
    ros-noetic-gazebo-ros \
    ros-noetic-gazebo-ros-control \
    ros-noetic-gazebo-ros-pkgs \
    ros-noetic-joint-state-publisher \
    ros-noetic-robot-state-publisher \
    ros-noetic-rviz \
    && apt-get clean && rm -rf /var/lib/apt/lists/*
# Install the Interbotix workspace
RUN mkdir -p /root/interbotix_ws/src
WORKDIR /root/interbotix_ws/src
RUN git clone https://github.com/Interbotix/interbotix_ros_manipulators.git
RUN git clone https://github.com/Interbotix/interbotix_ros_core.git
# Install dependencies for Interbotix
WORKDIR /root/interbotix_ws
RUN apt-get update && \
    rosdep install --from-paths src --ignore-src -r -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
# Build the Interbotix workspace
RUN /bin/bash -c "source /opt/ros/noetic/setup.bash && catkin_make -j2"
# Install Python dependencies for the agent
RUN python3.9 -m pip install --user pyinputplus rich
# Set up ROS environment
RUN rosdep update && \
    echo "source /opt/ros/noetic/setup.bash" >> /root/.bashrc && \
    echo "source /root/interbotix_ws/devel/setup.bash" >> /root/.bashrc && \
    echo "alias start='cd /app && catkin build && source devel/setup.bash && roslaunch arm_agent agent.launch'" >> /root/.bashrc && \
    echo "export ROSLAUNCH_SSH_UNKNOWN=1" >> /root/.bashrc
# Copy project files
COPY . /app/
WORKDIR /app/
# Make the arm agent script executable
RUN chmod +x /app/src/arm_agent/scripts/arm_agent.py
# Install the package with Python 3.9
RUN python3.9 -m pip install --user -e .
# Create a startup script that works with available launch files
RUN echo '#!/bin/bash\n\
source /opt/ros/noetic/setup.bash\n\
source /root/interbotix_ws/devel/setup.bash\n\
roscore > /dev/null 2>&1 &\n\
sleep 5\n\
\n\
# Check if Interbotix package is available\n\
if rospack find interbotix_xsarm_control > /dev/null 2>&1; then\n\
    echo "Found interbotix_xsarm_control package"\n\
    if [ "$HEADLESS" = "false" ]; then\n\
        roslaunch interbotix_xsarm_control xsarm_control.launch robot_model:=px100 use_fake:=true use_sim:=true &\n\
    else\n\
        xvfb-run -a -s "-screen 0 1920x1080x24" roslaunch interbotix_xsarm_control xsarm_control.launch robot_model:=px100 use_fake:=true use_sim:=true &\n\
    fi\n\
else\n\
    echo "WARNING: interbotix_xsarm_control package not found. Running in standalone simulation mode."\n\
    # Just start a joint state publisher for basic simulation\n\
    rosrun joint_state_publisher joint_state_publisher &\n\
fi\n\
\n\
sleep 5\n\
echo ""\n\
echo "Available packages:"\n\
rospack list | grep interbotix | head -n 10\n\
echo ""\n\
echo "Run '\''start'\'' to build and launch the ROSGPT-PincherX-100 demo."\n\
exec /bin/bash\n' > /start.sh && chmod +x /start.sh
CMD ["/start.sh"]